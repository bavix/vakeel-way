// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/vakeel_way/state.proto

package vakeel_way

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StateService_Update_FullMethodName = "/vakeel_way.StateService/Update"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StateService is a gRPC service that allows clients to update a list of UUIDs.
//
// The service provides the ability to update a list of UUIDs. The list of UUIDs
// is sent as a stream of UpdateRequest messages. Each UpdateRequest message
// contains a list of UUIDs that need to be updated. These UUIDs are used to
// uniquely identify the request and can be used to track the request throughout
// the system.
//
// The service is used to test that the gRPC service is working correctly. This
// is done by sending a stream of UpdateRequest messages and receiving a single
// UpdateResponse message in return. The UpdateResponse message is an empty
// message that indicates that the update operation was successful.
//
// It is also used to mark services as working for some time. If services stop
// sending information about themselves, then they do not work and it is
// necessary to notify monitoring and create an incident.
type StateServiceClient interface {
	// Updates the list of UUIDs.
	//
	// Takes an array of IDs as input and marks these services as working for
	// some time. If services stop sending information about themselves, then they
	// do not work and it is necessary to notify monitoring and create an
	// incident.
	//
	// The input is a stream of UpdateRequest messages. Each UpdateRequest
	// message contains a list of UUIDs that need to be updated.
	//
	// The output is a single UpdateResponse message. The UpdateResponse message
	// is an empty message that indicates that the update operation was
	// successful.
	Update(ctx context.Context, opts ...grpc.CallOption) (StateService_UpdateClient, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (StateService_UpdateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[0], StateService_Update_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceUpdateClient{ClientStream: stream}
	return x, nil
}

type StateService_UpdateClient interface {
	Send(*UpdateRequest) error
	CloseAndRecv() (*UpdateResponse, error)
	grpc.ClientStream
}

type stateServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *stateServiceUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateServiceUpdateClient) CloseAndRecv() (*UpdateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility
//
// StateService is a gRPC service that allows clients to update a list of UUIDs.
//
// The service provides the ability to update a list of UUIDs. The list of UUIDs
// is sent as a stream of UpdateRequest messages. Each UpdateRequest message
// contains a list of UUIDs that need to be updated. These UUIDs are used to
// uniquely identify the request and can be used to track the request throughout
// the system.
//
// The service is used to test that the gRPC service is working correctly. This
// is done by sending a stream of UpdateRequest messages and receiving a single
// UpdateResponse message in return. The UpdateResponse message is an empty
// message that indicates that the update operation was successful.
//
// It is also used to mark services as working for some time. If services stop
// sending information about themselves, then they do not work and it is
// necessary to notify monitoring and create an incident.
type StateServiceServer interface {
	// Updates the list of UUIDs.
	//
	// Takes an array of IDs as input and marks these services as working for
	// some time. If services stop sending information about themselves, then they
	// do not work and it is necessary to notify monitoring and create an
	// incident.
	//
	// The input is a stream of UpdateRequest messages. Each UpdateRequest
	// message contains a list of UUIDs that need to be updated.
	//
	// The output is a single UpdateResponse message. The UpdateResponse message
	// is an empty message that indicates that the update operation was
	// successful.
	Update(StateService_UpdateServer) error
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) Update(StateService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateServiceServer).Update(&stateServiceUpdateServer{ServerStream: stream})
}

type StateService_UpdateServer interface {
	SendAndClose(*UpdateResponse) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type stateServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *stateServiceUpdateServer) SendAndClose(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateServiceUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vakeel_way.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _StateService_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/vakeel_way/state.proto",
}
